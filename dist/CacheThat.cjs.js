"use strict";class CacheObject{constructor(e,t){this.data=e,this.timer=t||!1}}function timeHandler(e){if("number"==typeof e){if(e<0)throw new Error(`CacheThat => Paramter of expired time ( ${e} ) is invaild!`);return e}if("string"==typeof e){const t=/^[1-9][0-9]+[sS]$/,r=/^[1-9][0-9]+[mM]$/,s=/^[1-9][0-9]+[hH]$/,i=/^[1-9][0-9]+[dD]$/;if(/^[1-9]\d+/.test(e))return parseInt(e);if(t.test(e))return 1e3*parseInt(e.slice(0,-1));if(r.test(e))return 60*parseInt(e.slice(0,-1))*1e3;if(s.test(e))return 3600*parseInt(e.slice(0,-1))*1e3;if(i.test(e))return 3600*parseInt(e.slice(0,-1))*24*1e3;throw new Error(`CacheThat => Paramter of expired time ( ${e} ) is invaild!`)}}class CacheThat{constructor(e=!1){this.storage=new Map,this.defaultExpiredTime=!1!==e&&timeHandler(e),this.expireCacheHandler=e=>{this.removeItem(e)}}setItem(e,t,r){if(!1===r)this.storage.set(e,new CacheObject(t,!1));else{let s=null;s=void 0===r?this.defaultExpiredTime:timeHandler(r);const i=setTimeout(()=>{this.expireCacheHandler(e)},s);this.storage.set(e,new CacheObject(t,i))}}removeItem(e){const t=this.getCacheObject(e);void 0!==t&&(clearTimeout(t.timer),this.storage.delete(e))}getCacheObject(e){return this.storage.get(e)}getItem(e){const t=this.storage.get(e);return void 0===t?t:t.data}clear(){for(const e of this.storage.keys())this.removeItem(e)}countItems(){return this.storage.size}listKeys(){return Array.from(this.storage.keys())}}module.exports=CacheThat;
